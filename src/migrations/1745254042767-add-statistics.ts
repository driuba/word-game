import type { MigrationInterface, QueryRunner } from "typeorm";

export class AddStatistics1745254042767 implements MigrationInterface {
    name = 'AddStatistics1745254042767'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE VIEW "Statistics" AS WITH "WordsGuessedAll" AS (SELECT * FROM "Words" "w" WHERE "w"."UserIdGuesser" IS NOT NULL), "WordsGuessedWeek" AS (SELECT * FROM "WordsGuessedAll" "wga" WHERE wga.Created >= DATE('now', 'weekday 0', '-6 days')), "ChannelUsers" AS (SELECT wga.ChannelId, wga.UserIdCreator AS "UserId" FROM "WordsGuessedAll" "wga" UNION SELECT wga.ChannelId, wga.UserIdGuesser AS "UserId" FROM "WordsGuessedAll" "wga"), "GuessesAll" AS (SELECT w.ChannelId, w.UserIdCreator AS "UserId", COUNT(1) AS "Guesses" FROM "WordsGuessedAll" "w" GROUP BY w.ChannelId, w.UserIdGuesser), "GuessesWeek" AS (SELECT w.ChannelId, w.UserIdCreator AS "UserId", COUNT(1) AS "Guesses" FROM "WordsGuessedWeek" "w" GROUP BY w.ChannelId, w.UserIdGuesser), "ScoresAll" AS (SELECT w.ChannelId, w.UserIdCreator AS "UserId", SUM(w.Score) AS "Score", AVG(w.Score) AS "Average", MAX(w.Score) AS "Maximum" FROM "WordsGuessedAll" "w" WHERE w.UserIdGuesser IS NOT NULL GROUP BY w.ChannelId, w.UserIdGuesser), "ScoresWeek" AS (SELECT w.ChannelId, w.UserIdCreator AS "UserId", SUM(w.Score) AS "Score", AVG(w.Score) AS "Average", MAX(w.Score) AS "Maximum" FROM "WordsGuessedWeek" "w" WHERE w.UserIdGuesser IS NOT NULL GROUP BY w.ChannelId, w.UserIdGuesser) SELECT cu.ChannelId, cu.UserId, COALESCE(sw.Score, 0) AS "ScoreWeek", COALESCE(sw.Average, 0) AS "AverageWeek", COALESCE(sw.Maximum, 0) AS "MaximumWeek", COALESCE(gw.Guesses, 0) AS "GuessesWeek", COALESCE(sa.Score, 0) AS "ScoreAll", COALESCE(sa.Average, 0) AS "AverageAll", COALESCE(sa.Maximum, 0) AS "MaximumAll", COALESCE(ga.Guesses, 0) AS "GuessesAll" FROM "ChannelUsers" "cu" LEFT JOIN "GuessesAll" "ga" ON ga.ChannelId = cu.ChannelId AND ga.UserId = cu.UserId  LEFT JOIN "GuessesWeek" "gw" ON gw.ChannelId = cu.ChannelId AND gw.UserId = cu.UserId  LEFT JOIN "ScoresAll" "sa" ON sa.ChannelId = cu.ChannelId AND sa.UserId = cu.UserId  LEFT JOIN "ScoresWeek" "sw" ON sw.ChannelId = cu.ChannelId AND sw.UserId = cu.UserId ORDER BY sa.Score DESC NULLS LAST, ga.Guesses DESC NULLS LAST`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (NULL, NULL, NULL, ?, ?, ?)`, ["VIEW","Statistics","WITH \"WordsGuessedAll\" AS (SELECT * FROM \"Words\" \"w\" WHERE \"w\".\"UserIdGuesser\" IS NOT NULL), \"WordsGuessedWeek\" AS (SELECT * FROM \"WordsGuessedAll\" \"wga\" WHERE wga.Created >= DATE('now', 'weekday 0', '-6 days')), \"ChannelUsers\" AS (SELECT wga.ChannelId, wga.UserIdCreator AS \"UserId\" FROM \"WordsGuessedAll\" \"wga\" UNION SELECT wga.ChannelId, wga.UserIdGuesser AS \"UserId\" FROM \"WordsGuessedAll\" \"wga\"), \"GuessesAll\" AS (SELECT w.ChannelId, w.UserIdCreator AS \"UserId\", COUNT(1) AS \"Guesses\" FROM \"WordsGuessedAll\" \"w\" GROUP BY w.ChannelId, w.UserIdGuesser), \"GuessesWeek\" AS (SELECT w.ChannelId, w.UserIdCreator AS \"UserId\", COUNT(1) AS \"Guesses\" FROM \"WordsGuessedWeek\" \"w\" GROUP BY w.ChannelId, w.UserIdGuesser), \"ScoresAll\" AS (SELECT w.ChannelId, w.UserIdCreator AS \"UserId\", SUM(w.Score) AS \"Score\", AVG(w.Score) AS \"Average\", MAX(w.Score) AS \"Maximum\" FROM \"WordsGuessedAll\" \"w\" WHERE w.UserIdGuesser IS NOT NULL GROUP BY w.ChannelId, w.UserIdGuesser), \"ScoresWeek\" AS (SELECT w.ChannelId, w.UserIdCreator AS \"UserId\", SUM(w.Score) AS \"Score\", AVG(w.Score) AS \"Average\", MAX(w.Score) AS \"Maximum\" FROM \"WordsGuessedWeek\" \"w\" WHERE w.UserIdGuesser IS NOT NULL GROUP BY w.ChannelId, w.UserIdGuesser) SELECT cu.ChannelId, cu.UserId, COALESCE(sw.Score, 0) AS \"ScoreWeek\", COALESCE(sw.Average, 0) AS \"AverageWeek\", COALESCE(sw.Maximum, 0) AS \"MaximumWeek\", COALESCE(gw.Guesses, 0) AS \"GuessesWeek\", COALESCE(sa.Score, 0) AS \"ScoreAll\", COALESCE(sa.Average, 0) AS \"AverageAll\", COALESCE(sa.Maximum, 0) AS \"MaximumAll\", COALESCE(ga.Guesses, 0) AS \"GuessesAll\" FROM \"ChannelUsers\" \"cu\" LEFT JOIN \"GuessesAll\" \"ga\" ON ga.ChannelId = cu.ChannelId AND ga.UserId = cu.UserId  LEFT JOIN \"GuessesWeek\" \"gw\" ON gw.ChannelId = cu.ChannelId AND gw.UserId = cu.UserId  LEFT JOIN \"ScoresAll\" \"sa\" ON sa.ChannelId = cu.ChannelId AND sa.UserId = cu.UserId  LEFT JOIN \"ScoresWeek\" \"sw\" ON sw.ChannelId = cu.ChannelId AND sw.UserId = cu.UserId ORDER BY sa.Score DESC NULLS LAST, ga.Guesses DESC NULLS LAST"]);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = ? AND "name" = ?`, ["VIEW","Statistics"]);
        await queryRunner.query(`DROP VIEW "Statistics"`);
    }

}
